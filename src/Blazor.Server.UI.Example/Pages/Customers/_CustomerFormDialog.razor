@using Severity = MudBlazor.Severity
@using Application.Example.Features.Customers.Commands.AddEdit
@inherits MudComponentBase
@inject IStringLocalizer<Customers> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@Model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[Model.GetMemberDescription(x => x.Name)]" @bind-Value="Model.Name" For="@(() => Model.Name)" Required="true" RequiredError="@L["name is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[Model.GetMemberDescription(x => x.Description)]" Lines="3" For="@(() => Model.Description)" @bind-Value="Model.Description"></MudTextField>
                </MudItem>

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudButton Loading="@_saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving;
    private bool _savingnew;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    readonly AddEditCustomerCommandValidator _modelValidator = new AddEditCustomerCommandValidator();

    [EditorRequired]
    [Parameter]
    public AddEditCustomerCommand Model { get; set; } = null!;

    [Inject]
    private IMediator Mediator { get; set; } = default!;

    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate()
                        .ConfigureAwait(false);
            if (!_form!.IsValid) return;
            var result = await Mediator.Send(Model);
            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }

    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate()
                        .ConfigureAwait(false);
            if (!_form!.IsValid) return;
            var result = await Mediator.Send(Model);
            if (result.Succeeded)
            {
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                await Task.Delay(300);
                Model = new AddEditCustomerCommand();
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            _savingnew = false;
        }
    }

    void Cancel()
    {
        MudDialog.Cancel();
    }

}