@inject IStringLocalizer<UserLoginState> L
@using CleanArchitecture.Blazor.Infrastructure.Hubs
@using Severity = MudBlazor.Severity
@implements IDisposable

@code {

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    [Inject]
    public IDispatcher Dispatcher { get; set; } = null!;

    public void Dispose()
    {
        Client.Login -= _client_Login;
        Client.Logout -= _client_Logout;
        AuthenticationStateProvider.AuthenticationStateChanged -= _authenticationStateProvider_AuthenticationStateChanged;
        GC.SuppressFinalize(this);
    }

    [Inject]
    private HubClient Client { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Client.Login += _client_Login;
        Client.Logout += _client_Logout;
        await Client.StartAsync()
                    .ConfigureAwait(false);
        AuthenticationStateProvider.AuthenticationStateChanged += _authenticationStateProvider_AuthenticationStateChanged;
        var state = await AuthState;
        if (state.User.Identity?.IsAuthenticated ?? false)
        {
            var userId = state.User.GetUserId();
            SetProfile(userId!);
        }
    }

    private void _client_Login(object? sender, string username)
    {
        InvokeAsync(() => { Snackbar.Add(string.Format(L["{0} has logged in."], username), Severity.Info); });
    }

    private void _client_Logout(object? sender, string username)
    {
        InvokeAsync(() => { Snackbar.Add(string.Format(L["{0} has logged out."], username)); });
    }

    private void _authenticationStateProvider_AuthenticationStateChanged(Task<AuthenticationState> authenticationState)
    {
        InvokeAsync(async () =>
                          {
                              var state = await authenticationState;
                              if (state.User.Identity?.IsAuthenticated ?? false)
                              {
                                  var userId = state.User.GetUserId();
                                  SetProfile(userId!);
                              }
                          });
    }

    private void SetProfile(string userId)
    {
        Dispatcher.Dispatch(new FetchUserDtoAction
                            {
                                UserId = userId
                            });
    }

}