@page "/user/profile"
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using ResizeMode = SixLabors.ImageSharp.Processing.ResizeMode
@using Severity = MudBlazor.Severity
@using Size = SixLabors.ImageSharp.Size
@using SixLabors.ImageSharp.Formats.Png
@inherits OwningComponentBase
@inject IStringLocalizer<Profile> L
@inject IJSRuntime Js
<PageTitle>@Title</PageTitle>
<ErrorBoundary>
    <ChildContent>
        @if (IsLoading && string.IsNullOrEmpty(Model.UserId))
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
        }
        else
        {
            <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" Elevation="6" ActivePanelIndexChanged="ActivePanelIndexChanged"
                     ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
                <MudTabPanel Text="@L["Profile"]">
                    <MudForm Model="@Model" @ref="@_form" Validation="@(_userValidator.ValidateValue)" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                        <MudGrid Justify="Justify.Center" Style="max-width:600px;display:flex;">
                            <MudItem sm="12" xs="12">
                                <div class="d-flex justify-center">

                                    @if (string.IsNullOrEmpty(Model.ProfilePictureDataUrl))
                                    {
                                        <MudElement Class="d-flex flex-column  align-center">
                                            <MudAvatar Style="height:128px; width:128px; font-size:2rem;">@Model.UserName.ToUpper().First()</MudAvatar>
                                            <div class="d-flex">
                                                @if (Model.AssignedRoles is not null)
                                                {
                                                    @foreach (var role in Model.AssignedRoles)
                                                    {
                                                        <MudChip Size="MudBlazor.Size.Small">@role</MudChip>
                                                    }
                                                }
                                            </div>

                                        </MudElement>
                                    }
                                    else
                                    {
                                        <MudElement Class="d-flex flex-column  align-center">
                                            <MudAvatar Image="@Model.ProfilePictureDataUrl" Style="height:128px; width:128px; font-size:2rem;"/>
                                            <div class="d-flex">
                                                @if (Model.AssignedRoles is not null)
                                                {
                                                    @foreach (var role in Model.AssignedRoles)
                                                    {
                                                        <MudChip Size="MudBlazor.Size.Small">@role</MudChip>
                                                    }
                                                }
                                            </div>
                                        </MudElement>
                                    }
                                    <MudTooltip Text="@L["Click upload a photo."]">
                                        <InputFile id="UploadPhoto" OnChange="UploadPhoto" hidden accept=".jpg, .jpeg, .png"/>
                                        <MudIconButton HtmlTag="label"
                                                       Color="Color.Info"
                                                       Icon="@Icons.Material.Filled.PhotoCamera"
                                                       for="UploadPhoto">
                                        </MudIconButton>
                                    </MudTooltip>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField For="@(() => Model.SuperiorName)" @bind-Value="Model.SuperiorName" Label="@L["Superior Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.UserName)" @bind-Value="Model.UserName" Label="@L["User Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.Email)" @bind-Value="Model.Email" Label="@L["Email"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.DisplayName)" @bind-Value="Model.DisplayName" Label="@L["Display Name"]" Variant="Variant.Text"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.PhoneNumber)" @bind-Value="Model.PhoneNumber" Label="@L["Phone Number"]" Variant="Variant.Text"></MudTextField>
                            </MudItem>
                            <MudItem sm="12" xs="12" Class="d-flex justify-end">
                                <MudButton ButtonType="ButtonType.Button" Disabled="@_submitting" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">
                                    @if (_submitting)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true"/>
                                        <MudText Class="ms-2">@ConstantString.Waiting </MudText>
                                    }
                                    else
                                    {
                                        <MudText>@ConstantString.Save</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudTabPanel>
                <MudTabPanel Text="@L["Change Password"]">
                    <MudForm Model="@Changepassword" @ref="@_passwordform" Validation="@(_passwordValidator.ValidateValue)" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                        <MudGrid Justify="Justify.Center" Style="max-width:300px">
                            <MudItem sm="12" xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["Current Password"]"
                                                  For="@(() => Changepassword.CurrentPassword)"
                                                  @bind-Value="Changepassword.CurrentPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"
                                                  RequiredError="@L["current password is required!"]"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["New Password"]"
                                                  For="@(() => Changepassword.NewPassword)"
                                                  @bind-Value="Changepassword.NewPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"
                                                  RequiredError="@L["password is required!"]"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["Confirm New Password"]"
                                                  For="@(() => Changepassword.ConfirmPassword)"
                                                  @bind-Value="Changepassword.ConfirmPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"
                                                  RequiredError="@L["password is required!"]"/>
                            </MudItem>
                            <MudItem sm="12" xs="12" Class="d-flex justify-end">
                                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await ChangePassword())">
                                    @if (_submitting)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true"/>
                                        <MudText Class="ms-2">@ConstantString.Waiting </MudText>
                                    }
                                    else
                                    {
                                        <MudText>@L["Change Password"]</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudTabPanel>
                <MudTabPanel Text="@L["Org Chart"]">
                    <div class="chart-container"
                         style="height: calc(100vh - 265px);">
                    </div>
                </MudTabPanel>
            </MudTabs>
        }
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>

@code {

    [Inject]
    private IState<UserProfileState> UserProfileState { get; set; } = null!;

    private bool IsLoading => UserProfileState.Value.IsLoading;

    [Inject]
    private IDispatcher Dispatcher { get; set; } = null!;

    private MudForm? _form;
    private MudForm? _passwordform;
    public string Title { get; set; } = "Profile";

    private bool _submitting;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    [Inject]
    private IUploadService UploadService { get; set; } = default!;

    private UserProfile Model => UserProfileState.Value.UserProfile;
    private readonly UserProfileEditValidator _userValidator = new UserProfileEditValidator();
    private UserManager<ApplicationUser> UserManager { get; set; } = default!;

    [Inject]
    private IIdentityService IdentityService { get; set; } = default!;

    public string Id => Guid.NewGuid()
                            .ToString();

    public void ReRender()
    {
        StateHasChanged();
    }

    private ChangePasswordModel Changepassword { get; } = new ChangePasswordModel();
    private readonly ChangePasswordModelValidator _passwordValidator = new ChangePasswordModelValidator();
    private readonly List<OrgItem> _orgData = new List<OrgItem>();

    private async void ActivePanelIndexChanged(int index)
    {
        if (index == 2)
        {
            await LoadOrgData();
            await Js.InvokeVoidAsync("createOrgChart", _orgData);
        }
    }

    private async Task LoadOrgData()
    {
        var currerntuserName = (await AuthState).User.GetUserName();
        var list = await UserManager.Users.Include(x => x.UserRoles)
                                    .ThenInclude(x => x.Role)
                                    .Include(x => x.Superior)
                                    .ToListAsync();
        foreach (var item in list)
        {
            var roles = await UserManager.GetRolesAsync(item);
            var count = await UserManager.Users.Where(x => x.SuperiorId == item.Id)
                                         .CountAsync();
            var orgitem = new OrgItem();
            orgitem.Id = item.Id;
            orgitem.Name = item.DisplayName ?? item.UserName;
            orgitem.ProfileUrl = item.ProfilePictureDataUrl;
            orgitem.ImageUrl = item.ProfilePictureDataUrl;
            if (currerntuserName == item.UserName) orgitem.IsLoggedUser = true;
            orgitem.Size = "";
            orgitem.Tags = item.PhoneNumber ?? item.Email;
            if (roles != null && roles.Count > 0) orgitem.PositionName = string.Join(',', roles);
            orgitem.ParentId = item.SuperiorId;

            orgitem.DirectSubordinates = count;
            _orgData.Add(orgitem);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UserManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        UserProfileState.StateChanged += StateOnStateChanged;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        UserProfileState.StateChanged -= StateOnStateChanged;
    }

    private void StateOnStateChanged(object? sender, EventArgs args)
    {
        InvokeAsync(() => { StateHasChanged(); });
    }

    private async Task UploadPhoto(InputFileChangeEventArgs e)
    {
        var filestream = e.File.OpenReadStream(GlobalVariable.MaxAllowedSize);
        var imgstream = new MemoryStream();
        await filestream.CopyToAsync(imgstream);
        imgstream.Position = 0;
        using (var outStream = new MemoryStream())
        {
            using (var image = await Image.LoadAsync(imgstream))
            {
                image.Mutate(i => i.Resize(new ResizeOptions
                                           {
                                               Mode = ResizeMode.Crop,
                                               Size = new Size(128, 128)
                                           }));
                image.Save(outStream, PngFormat.Instance);
                var filename = e.File.Name;
                var fi = new FileInfo(filename);
                var ext = fi.Extension;
                var result = await UploadService.UploadAsync(new UploadRequest(Guid.NewGuid() + ext, "ProfilePicture", outStream.ToArray()));
                Model.ProfilePictureDataUrl = result;
                var user = await UserManager.FindByIdAsync(Model.UserId!);
                user!.ProfilePictureDataUrl = Model.ProfilePictureDataUrl;
                await UserManager.UpdateAsync(user);
                Snackbar.Add(L["The avatar has been updated."], Severity.Info);
                Dispatcher.Dispatch(new UserProfileUpdateAction
                                    {
                                        UserProfile = Model
                                    });
            }
        }
    }

    private async Task Submit()
    {
        _submitting = true;
        try
        {
            await _form!.Validate();
            if (_form.IsValid)
            {
                await AuthState;
                var user = await UserManager.FindByIdAsync(Model.UserId!);
                user!.PhoneNumber = Model.PhoneNumber;
                user.DisplayName = Model.DisplayName;
                user.ProfilePictureDataUrl = Model.ProfilePictureDataUrl;
                await UserManager.UpdateAsync(user);
                Snackbar.Add($"{ConstantString.UpdateSuccess}", Severity.Info);
                Dispatcher.Dispatch(new UserProfileUpdateAction
                                    {
                                        UserProfile = Model
                                    });
            }
        }
        finally
        {
            _submitting = false;
        }
    }

    private async Task ChangePassword()
    {
        _submitting = true;
        try
        {
            await _passwordform!.Validate();
            if (_passwordform!.IsValid)
            {
                var user = await UserManager.FindByIdAsync(Model.UserId!);
                var result = await UserManager.ChangePasswordAsync(user!, Changepassword.CurrentPassword, Changepassword.NewPassword);
                if (result.Succeeded)
                {
                    Snackbar.Add($"{L["Changed password successfully."]}", Severity.Info);
                }
                else
                {
                    Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
                }
            }
        }
        finally
        {
            _submitting = false;
        }
    }

}