@using CleanArchitecture.Blazor.Application.Features.Tenants.Commands.AddEdit
@using Severity = MudBlazor.Severity
@inherits MudComponentBase
@inject IStringLocalizer<Tenants> L
<MudDialog>
    <DialogContent>
        <MudForm Model="Model" @ref="_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="@L[Model.GetMemberDescription(x => x.Id)]" @bind-Value="Model.Id"
                                  For="@(() => Model.Id)"
                                  ReadOnly="true"
                                  Required="true"
                                  RequiredError="@L["Tenant id is required!"]">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="@L[Model.GetMemberDescription(x => x.Name)]" @bind-Value="Model.Name"
                                  For="@(() => Model.Name)"
                                  Required="true"
                                  RequiredError="@L["Tenant name is required!"]">
                    </MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="@L[Model.GetMemberDescription(x => x.Description)]" @bind-Value="Model.Description"
                                  For="@(() => Model.Description)">
                    </MudTextField>
                </MudItem>

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    bool _saving;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    readonly AddEditTenantCommandValidator _modelValidator = new AddEditTenantCommandValidator();

    [EditorRequired]
    [Parameter]
    public AddEditTenantCommand Model { get; set; } = default!;

    [Inject]
    private IMediator Mediator { get; set; } = default!;

    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate()
                        .ConfigureAwait(false);

            if (!_form!.IsValid) return;
            var result = await Mediator.Send(Model);

            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }

    void Cancel()
    {
        MudDialog.Cancel();
    }

}