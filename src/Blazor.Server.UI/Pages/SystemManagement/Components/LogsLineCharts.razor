@using CleanArchitecture.Blazor.Application.Features.Loggers.DTOs
@using ApexCharts
@using Blazor.Server.UI.Services.Layout
@implements IDisposable
@inject IStringLocalizer<Logs> L

<div class="d-flex flex-grow-1 mb-2">
    <MudPaper Class="pa-5 flex-grow-1" Elevation="3" Style="@BackgroundColor">
        <ApexChart @ref="Chart" Options="Options" TItem="LogTimeLineDto" Height="180"
                   Debug
                   Title="@L["Collect logs by day"]">

            <ApexPointSeries TItem="LogTimeLineDto"
                             Items="Data"
                             Name="Count"
                             XValue="@(e => e.Dt.ToString("MMM-d"))"
                             YValue="@(e => e.Total)"
                             YAggregate="@(e => e.Sum(s => s.Total))"
                             SeriesType="SeriesType.Bar"/>
        </ApexChart>
    </MudPaper>
</div>

@code {
    private ApexChart<LogTimeLineDto>? Chart { get; set; }
    private ApexChartOptions<LogTimeLineDto> Options { get; set; } = new ApexChartOptions<LogTimeLineDto>();

    [EditorRequired]
    [Parameter]
    public List<LogTimeLineDto> Data { get; set; } = new List<LogTimeLineDto>();

    [Inject]
    private LayoutService LayoutService { get; set; } = null!;

    public string BackgroundColor = "background:#fff";

    protected override void OnInitialized()
    {
        var isDarkMode = LayoutService.IsDarkMode;
        var colors = isDarkMode ? new List<string>
                                  {
                                      "#0277BD",
                                      "#039BE5"
                                  } : new List<string>
                                      {
                                          "#1976D2",
                                          "#90CAF9"
                                      };
        BackgroundColor = isDarkMode ? "background:rgb(66, 66, 66)" : "background:#fff";

        Options.Theme = new Theme
                        {
                            Mode = isDarkMode ? Mode.Dark : Mode.Light
                        };

        Options.Fill = new Fill
                       {
                           Type = new List<FillType>
                                  {
                                      FillType.Gradient
                                  },
                           Gradient = new FillGradient
                                      {
                                          Type = GradientType.Vertical,
                                          ShadeIntensity = 1,
                                          OpacityFrom = 1,
                                          OpacityTo = 0.7,
                                          GradientToColors = colors,
                                          Stops = new List<double>
                                                  {
                                                      0,
                                                      100
                                                  }
                                      }
                       };
        Options.Yaxis = new List<YAxis>();
        Options.Yaxis.Add(new YAxis
                          {
                              Labels = new YAxisLabels
                                       {
                                           Formatter = @"function (value) {return Number(value).toLocaleString();}"
                                       }
                          });
        Options.Xaxis = new XAxis
                        {
                            Labels = new XAxisLabels
                                     {
                                         Formatter = @"function (value) {
                    if (value === undefined) {return '';}
                    return '';}"
                                     }
                        };

        Options.DataLabels = new DataLabels
                             {
                                 Formatter = @"function(value, opts) {
                   return  Number(value).toLocaleString();}"
                             };

        Options.Tooltip = new Tooltip
                          {
                              X = new TooltipX
                                  {
                                      Formatter = @"function(value, opts) {
                    if (value === undefined) {return '';}
                    return  value}"
                                  }
                          };

        LayoutService.MajorUpdateOccured += LayoutServiceOnMajorUpdateOccured;
    }

    private async void LayoutServiceOnMajorUpdateOccured(object? sender, EventArgs e)
    {
        var isDarkMode = LayoutService.IsDarkMode;
        var colors = isDarkMode ? new List<string>
                                  {
                                      "#0277BD",
                                      "#039BE5"
                                  } : new List<string>
                                      {
                                          "#1976D2",
                                          "#90CAF9"
                                      };
        BackgroundColor = isDarkMode ? "background:rgb(66, 66, 66)" : "background:#fff";
        Options.Theme.Mode = isDarkMode ? Mode.Dark : Mode.Light;
        Options.Fill.Gradient.GradientToColors = colors;
        await Chart!.UpdateOptionsAsync(true, true, false);
        await Chart!.RenderAsync();
        StateHasChanged();
    }

    public async Task RenderChart()
    {
        await Chart!.UpdateSeriesAsync();
        await Chart!.RenderAsync();
    }

    public void Dispose()
    {
        LayoutService.MajorUpdateOccured -= LayoutServiceOnMajorUpdateOccured;
        GC.SuppressFinalize(this);
    }

}